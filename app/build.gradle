import org.apache.commons.io.FileUtils
import org.apache.commons.io.filefilter.FileFilterUtils


plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.dell.notescompaniondevice"
        minSdkVersion 29
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation project(path: ':UIReferenceImplementation')
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task DownloadAndExtractAssets(type: Copy) {
    def sourceUrls = ['https://s3-us-west-2.amazonaws.com/iink/assets/1.4.0/myscript-iink-recognition-diagram.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.4.0/myscript-iink-recognition-raw-content.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.4.0/myscript-iink-recognition-math.zip',
                      'https://s3-us-west-2.amazonaws.com/iink/assets/1.4.0/myscript-iink-recognition-text-en_US.zip']
    def targetDir = new File(projectDir, "src/main/assets/")
    def diagramConf = new File(targetDir, "conf/diagram.conf")
    def rawContentConf = new File(targetDir, "conf/raw-content.conf")
    def mathConf = new File(targetDir, "conf/math.conf")
    def textConf = new File(targetDir, "conf/en_US.conf")

    if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
        def tmpAssetsDir = new File(projectDir, "tmp-assets/")
        def zipDir = new File(tmpAssetsDir, "zips")

        if (!tmpAssetsDir.isDirectory())
            tmpAssetsDir.mkdirs()

        if (!zipDir.isDirectory())
            zipDir.mkdirs()

        sourceUrls.each { sourceUrl ->
            ant.get(src: sourceUrl, dest: zipDir.getPath())
        }

        File[] zipFiles = FileUtils.listFiles(zipDir, FileFilterUtils.suffixFileFilter("zip"), FileFilterUtils.trueFileFilter())
        zipFiles.each { File zipFile ->
            from zipTree(zipFile)
            into tmpAssetsDir
        }
    }
}

task CopyAssets(type: Copy, dependsOn: DownloadAndExtractAssets) {
    def targetDir = new File(projectDir, "src/main/assets/")
    def diagramConf = new File(targetDir, "conf/diagram.conf")
    def rawContentConf = new File(targetDir, "conf/raw-content.conf")
    def mathConf = new File(targetDir, "conf/math.conf")
    def textConf = new File(targetDir, "conf/en_US.conf")

    if (!diagramConf.exists() || !rawContentConf.exists() || !mathConf.exists() || !textConf.exists()) {
        def tmpAssetsDir = new File(projectDir, "tmp-assets/")

        if (!tmpAssetsDir.isDirectory())
            tmpAssetsDir.mkdirs()

        def recognitionAssetDir = new File(tmpAssetsDir, "recognition-assets/")

        println "Copying downloaded assets from $recognitionAssetDir to $targetDir"
        from recognitionAssetDir
        into targetDir

        doLast {
            tmpAssetsDir.deleteDir()
        }
    }
}

preBuild.dependsOn(CopyAssets)
